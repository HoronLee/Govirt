// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: libvirt/libvirt.proto

package libvirtPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LibvirtService_GetLibVersion_FullMethodName  = "/libvirt.LibvirtService/GetLibVersion"
	LibvirtService_GetLibvirtInfo_FullMethodName = "/libvirt.LibvirtService/GetLibvirtInfo"
)

// LibvirtServiceClient is the client API for LibvirtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibvirtServiceClient interface {
	GetLibVersion(ctx context.Context, in *GetLibVersionRequest, opts ...grpc.CallOption) (*GetLibVersionResponse, error)
	GetLibvirtInfo(ctx context.Context, in *GetLibvirtInfoRequest, opts ...grpc.CallOption) (*GetLibvirtInfoResponse, error)
}

type libvirtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibvirtServiceClient(cc grpc.ClientConnInterface) LibvirtServiceClient {
	return &libvirtServiceClient{cc}
}

func (c *libvirtServiceClient) GetLibVersion(ctx context.Context, in *GetLibVersionRequest, opts ...grpc.CallOption) (*GetLibVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLibVersionResponse)
	err := c.cc.Invoke(ctx, LibvirtService_GetLibVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libvirtServiceClient) GetLibvirtInfo(ctx context.Context, in *GetLibvirtInfoRequest, opts ...grpc.CallOption) (*GetLibvirtInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLibvirtInfoResponse)
	err := c.cc.Invoke(ctx, LibvirtService_GetLibvirtInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibvirtServiceServer is the server API for LibvirtService service.
// All implementations must embed UnimplementedLibvirtServiceServer
// for forward compatibility.
type LibvirtServiceServer interface {
	GetLibVersion(context.Context, *GetLibVersionRequest) (*GetLibVersionResponse, error)
	GetLibvirtInfo(context.Context, *GetLibvirtInfoRequest) (*GetLibvirtInfoResponse, error)
	mustEmbedUnimplementedLibvirtServiceServer()
}

// UnimplementedLibvirtServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLibvirtServiceServer struct{}

func (UnimplementedLibvirtServiceServer) GetLibVersion(context.Context, *GetLibVersionRequest) (*GetLibVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLibVersion not implemented")
}
func (UnimplementedLibvirtServiceServer) GetLibvirtInfo(context.Context, *GetLibvirtInfoRequest) (*GetLibvirtInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLibvirtInfo not implemented")
}
func (UnimplementedLibvirtServiceServer) mustEmbedUnimplementedLibvirtServiceServer() {}
func (UnimplementedLibvirtServiceServer) testEmbeddedByValue()                        {}

// UnsafeLibvirtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibvirtServiceServer will
// result in compilation errors.
type UnsafeLibvirtServiceServer interface {
	mustEmbedUnimplementedLibvirtServiceServer()
}

func RegisterLibvirtServiceServer(s grpc.ServiceRegistrar, srv LibvirtServiceServer) {
	// If the following call pancis, it indicates UnimplementedLibvirtServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LibvirtService_ServiceDesc, srv)
}

func _LibvirtService_GetLibVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLibVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibvirtServiceServer).GetLibVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibvirtService_GetLibVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibvirtServiceServer).GetLibVersion(ctx, req.(*GetLibVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibvirtService_GetLibvirtInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLibvirtInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibvirtServiceServer).GetLibvirtInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibvirtService_GetLibvirtInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibvirtServiceServer).GetLibvirtInfo(ctx, req.(*GetLibvirtInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LibvirtService_ServiceDesc is the grpc.ServiceDesc for LibvirtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibvirtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "libvirt.LibvirtService",
	HandlerType: (*LibvirtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLibVersion",
			Handler:    _LibvirtService_GetLibVersion_Handler,
		},
		{
			MethodName: "GetLibvirtInfo",
			Handler:    _LibvirtService_GetLibvirtInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "libvirt/libvirt.proto",
}
